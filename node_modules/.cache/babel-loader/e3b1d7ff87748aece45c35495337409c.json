{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\Desktop\\\\fukran\\\\quora-clone\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport Login from \"./component/auth/Login\";\nimport Quora from \"./component/Quora\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport { auth } from \"./firebase\";\nimport { css } from \"@emotion/react\";\nimport ClockLoader from \"react-spinners/ClockLoader\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst override = css`\n  display: block;\n  margin: 20% auto;\n  border-color: red;\n  size: 50;\n`;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [color, setColor] = useState(\"#27B9AF\");\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const Handler = () => auth.onAuthStateChanged(async authUser => {\n    setLoading(true);\n\n    if (authUser) {\n      dispatch(login({\n        uid: authUser.uid,\n        email: authUser.email,\n        displayName: authUser.displayName,\n        photo: authUser.photoURL\n      }));\n      console.log(authUser);\n    } else {\n      setLoading(true);\n      dispatch(logout());\n    }\n  });\n\n  useEffect(() => {\n    Handler();\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/feed\",\n          element: /*#__PURE__*/_jsxDEV(Quora, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", user ? /*#__PURE__*/_jsxDEV(Navigate, {\n        replace: true,\n        to: \"/feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 63\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(ClockLoader, {\n      color: color,\n      loading: true,\n      css: override,\n      size: 150\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 80\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"qjI2j7R1x2YibOV/KlRIaoXDgvc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/priya/Desktop/fukran/quora-clone/src/App.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Login","Quora","login","logout","selectUser","auth","css","ClockLoader","BrowserRouter","Router","Routes","Route","Navigate","override","App","loading","setLoading","color","setColor","user","dispatch","Handler","onAuthStateChanged","authUser","uid","email","displayName","photo","photoURL","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport Login from \"./component/auth/Login\";\nimport Quora from \"./component/Quora\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport { auth } from \"./firebase\";\nimport { css } from \"@emotion/react\";\nimport ClockLoader from \"react-spinners/ClockLoader\";\nimport { BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\nimport { Navigate } from 'react-router-dom'\nconst override = css`\n  display: block;\n  margin: 20% auto;\n  border-color: red;\n  size: 50;\n`;\n\n\nfunction App() {\n\n  \nconst [loading, setLoading] = useState(false);\nconst [color, setColor] = useState(\"#27B9AF\");\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const Handler = () => auth.onAuthStateChanged( async(authUser) => {\n    setLoading(true);\n    if (authUser) {\n     dispatch(\n        login({\n          uid: authUser.uid,\n          email: authUser.email,\n          displayName: authUser.displayName,\n          photo: authUser.photoURL,\n        })\n      );\n      console.log(authUser);\n      \n      \n    } else {\n      setLoading(true) \n      dispatch(logout());\n      \n    }\n    \n  });\n\n  useEffect(() => {\n    Handler();\n    \n  }, [dispatch]);\n  \n  \n  return <div className=\"App\">\n    <Router>\n        <Routes>      \n          <Route exact path=\"/\" element={<Login />}></Route>\n          <Route path=\"/feed\" element={<Quora />}></Route>  \n        </Routes>\n      </Router>\n\n    {loading ? <> {user ?  <Navigate replace to=\"/feed\" /> :  <Login />} </> : <ClockLoader color={color} loading={true} css={override} size={150} /> }\n    </div>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}